{"cells":[{"cell_type":"markdown","id":"9lgASw3wE34X","metadata":{"id":"9lgASw3wE34X"},"source":["# Montando o Google Drive"]},{"cell_type":"code","execution_count":null,"id":"zhgTTY57U3o7","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23534,"status":"ok","timestamp":1736831984256,"user":{"displayName":"Vinícius Meireles Pereira Santos","userId":"14026147295438053508"},"user_tz":180},"id":"zhgTTY57U3o7","outputId":"cd8240d2-f5d2-468c-d81c-7b4b33c4575f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["#conecta com o google drive\n","from google.colab import drive\n","drive.mount('/content/drive', timeout_ms=10200000)\n"]},{"cell_type":"markdown","id":"_yfa9nNpFAkJ","metadata":{"id":"_yfa9nNpFAkJ"},"source":["# Importando Bibliotecas"]},{"cell_type":"code","execution_count":null,"id":"c95c6b6b-b71f-4ae3-b291-5bb02b73cfe9","metadata":{"id":"c95c6b6b-b71f-4ae3-b291-5bb02b73cfe9"},"outputs":[],"source":["import os\n","import random\n","import time\n","import platform\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, roc_curve, auc\n","from sklearn import metrics\n","from sklearn.preprocessing import label_binarize\n","from tqdm import tqdm\n","\n","import torch\n","import torchvision\n","from torchvision import transforms, datasets, utils\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.optim import lr_scheduler\n","from torchvision import models\n","from torch.utils.data import DataLoader\n","\n","import seaborn as sns"]},{"cell_type":"markdown","id":"USEXocsnGAUc","metadata":{"id":"USEXocsnGAUc"},"source":["# Configurações para reprodutibildade"]},{"cell_type":"code","execution_count":null,"id":"ZPx3YnoCGF0s","metadata":{"id":"ZPx3YnoCGF0s"},"outputs":[],"source":["SEED = 42\n","\n","random.seed(SEED)\n","np.random.seed(SEED)\n","\n","torch.manual_seed(SEED)\n","torch.cuda.manual_seed(SEED)\n","\n","torch.backends.cudnn.benchmark = False\n","torch.backends.cudnn.deterministic = True"]},{"cell_type":"markdown","id":"IhaLAKCjGiv4","metadata":{"id":"IhaLAKCjGiv4"},"source":["# O Dataset"]},{"cell_type":"code","execution_count":null,"id":"cOCFLfKoGlUL","metadata":{"id":"cOCFLfKoGlUL"},"outputs":[],"source":["ds_path = '/content/drive/MyDrive/Projetos/Projeto2Visao/dataset'"]},{"cell_type":"code","execution_count":null,"id":"dgiu54kJGx8M","metadata":{"id":"dgiu54kJGx8M"},"outputs":[],"source":["# Número de classes\n","num_classes = 11\n","\n","# Nomes das classes\n","class_names = ['dew', 'fogsmog', 'frost', 'glaze', 'hail', 'lightining', 'rain', 'rainbow', 'rime', 'sandstorm', 'snow']\n","\n","# Tamanho do lote (mini-batch)\n","batch_size = 64\n","\n","# Taxa de aprendizado\n","lr = 0.001\n","\n","# Número de épocas\n","epochs = 100 # Usar durante o desenvolvimento\n","### epochs = 50"]},{"cell_type":"code","execution_count":null,"id":"U1_TRd7OIks4","metadata":{"id":"U1_TRd7OIks4"},"outputs":[],"source":["# Treinamento\n","data_transforms = transforms.Compose([\n","\n","    #Estratégias de Data Augmentation (rotação e flips)\n","    transforms.RandomHorizontalFlip(),\n","    transforms.RandomRotation(15),\n","\n","    transforms.Resize(size=(224, 224)),\n","    transforms.ToTensor(),\n","    # Média e desvio padrão do ImageNet.\n","    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","])\n","\n","full_dataset = datasets.ImageFolder(ds_path, transform=data_transforms)\n"]},{"cell_type":"code","execution_count":null,"id":"C4M1U89MJLX9","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1736832004058,"user":{"displayName":"Vinícius Meireles Pereira Santos","userId":"14026147295438053508"},"user_tz":180},"id":"C4M1U89MJLX9","outputId":"85d54b82-c5ce-4948-a3eb-a598ff618625"},"outputs":[{"output_type":"stream","name":"stdout","text":["Tamanhos dos conjuntos:\n","Treino: 4803\n","Validação: 1372\n","Teste: 687\n"]}],"source":["# Porcentagens para os conjuntos\n","train_percent = 0.7  # 70% para treino\n","val_percent = 0.2    # 20% para validação\n","test_percent = 0.1   # 10% para teste\n","\n","# Tamanhos dos conjuntos\n","train_size = int(train_percent * len(full_dataset))\n","val_size = int(val_percent * len(full_dataset))\n","test_size = len(full_dataset) - train_size - val_size\n","\n","# Dividindo o dataset\n","train_dataset, val_dataset, test_dataset = torch.utils.data.random_split(\n","    full_dataset, [train_size, val_size, test_size]\n",")\n","\n","# Número de imagens em cada dataset\n","print(\"Tamanhos dos conjuntos:\")\n","print(f\"Treino: {len(train_dataset)}\")\n","print(f\"Validação: {len(val_dataset)}\")\n","print(f\"Teste: {len(test_dataset)}\")\n","\n","# Definindo os dataloaders\n","train_dataloader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)\n","val_dataloader = torch.utils.data.DataLoader(dataset=val_dataset, batch_size=batch_size)\n","test_dataloader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=batch_size)\n"]},{"cell_type":"code","execution_count":null,"id":"871f7fad-53cd-474b-868a-36211a5358f7","metadata":{"id":"871f7fad-53cd-474b-868a-36211a5358f7"},"outputs":[],"source":["# Definindo as classes do dataset\n","classes = train_dataset.dataset.classes"]},{"cell_type":"code","execution_count":null,"id":"26400935-9d06-48db-9106-f65d1b5cf6a8","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1736832004059,"user":{"displayName":"Vinícius Meireles Pereira Santos","userId":"14026147295438053508"},"user_tz":180},"id":"26400935-9d06-48db-9106-f65d1b5cf6a8","outputId":"a6f383ee-39fd-4793-bb98-043d4674b97b"},"outputs":[{"output_type":"stream","name":"stdout","text":["['dew', 'fogsmog', 'frost', 'glaze', 'hail', 'lightning', 'rain', 'rainbow', 'rime', 'sandstorm', 'snow']\n"]}],"source":["print(classes)"]},{"cell_type":"markdown","id":"lNVUA_3rJ-3S","metadata":{"id":"lNVUA_3rJ-3S"},"source":["#Seleção do Modelo"]},{"cell_type":"code","execution_count":null,"id":"85b4a0f0-16fc-48c6-bf06-3b5d1c4e8951","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":778,"status":"ok","timestamp":1736832004823,"user":{"displayName":"Vinícius Meireles Pereira Santos","userId":"14026147295438053508"},"user_tz":180},"id":"85b4a0f0-16fc-48c6-bf06-3b5d1c4e8951","outputId":"574d9ac7-0a88-4e2c-f0da-33f32fd8ab2e"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=MobileNet_V3_Small_Weights.IMAGENET1K_V1`. You can also use `weights=MobileNet_V3_Small_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/mobilenet_v3_small-047dcff4.pth\" to /root/.cache/torch/hub/checkpoints/mobilenet_v3_small-047dcff4.pth\n","100%|██████████| 9.83M/9.83M [00:00<00:00, 43.5MB/s]"]},{"output_type":"stream","name":"stdout","text":["MobileNetV3(\n","  (features): Sequential(\n","    (0): Conv2dNormActivation(\n","      (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (1): BatchNorm2d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","      (2): Hardswish()\n","    )\n","    (1): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)\n","          (1): BatchNorm2d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): ReLU(inplace=True)\n","        )\n","        (1): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (2): Conv2dNormActivation(\n","          (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (2): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(16, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(72, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): ReLU(inplace=True)\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(72, 72, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=72, bias=False)\n","          (1): BatchNorm2d(72, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): ReLU(inplace=True)\n","        )\n","        (2): Conv2dNormActivation(\n","          (0): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(24, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (3): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(24, 88, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(88, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): ReLU(inplace=True)\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(88, 88, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=88, bias=False)\n","          (1): BatchNorm2d(88, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): ReLU(inplace=True)\n","        )\n","        (2): Conv2dNormActivation(\n","          (0): Conv2d(88, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(24, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (4): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(96, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(96, 96, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=96, bias=False)\n","          (1): BatchNorm2d(96, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(96, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(40, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (5): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(240, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n","          (1): BatchNorm2d(240, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(240, 64, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(64, 240, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(40, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (6): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(240, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n","          (1): BatchNorm2d(240, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(240, 64, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(64, 240, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(40, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (7): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(120, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)\n","          (1): BatchNorm2d(120, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(120, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(48, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (8): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(48, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(144, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=144, bias=False)\n","          (1): BatchNorm2d(144, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(40, 144, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(144, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(48, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (9): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(288, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(288, 288, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=288, bias=False)\n","          (1): BatchNorm2d(288, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(288, 72, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(72, 288, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(288, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(96, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (10): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(576, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(576, 576, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=576, bias=False)\n","          (1): BatchNorm2d(576, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(576, 144, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(144, 576, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(96, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (11): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(576, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(576, 576, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=576, bias=False)\n","          (1): BatchNorm2d(576, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(576, 144, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(144, 576, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(96, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (12): Conv2dNormActivation(\n","      (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (1): BatchNorm2d(576, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","      (2): Hardswish()\n","    )\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=1)\n","  (classifier): Sequential(\n","    (0): Linear(in_features=576, out_features=1024, bias=True)\n","    (1): Hardswish()\n","    (2): Dropout(p=0.2, inplace=True)\n","    (3): Linear(in_features=1024, out_features=11, bias=True)\n","  )\n",")\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["# Carregando o modelo Pré-Treinado\n","model = models.mobilenet_v3_small(pretrained=True)\n","\n","# Altera o número de neurônios na cadama de saída.\n","model.classifier[3] = nn.Linear(model.classifier[3].in_features, num_classes)\n","\n","print(str(model))"]},{"cell_type":"markdown","id":"MnU7CaWYGTcK","metadata":{"id":"MnU7CaWYGTcK"},"source":["# Verificação de Acesso à GPU"]},{"cell_type":"code","execution_count":null,"id":"e3185a1d-dcb2-4644-bd99-fd374a90ff2f","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":400,"status":"ok","timestamp":1736832005217,"user":{"displayName":"Vinícius Meireles Pereira Santos","userId":"14026147295438053508"},"user_tz":180},"id":"e3185a1d-dcb2-4644-bd99-fd374a90ff2f","outputId":"1554a766-65fc-4600-c6a9-08f1e2f86f72"},"outputs":[{"output_type":"stream","name":"stdout","text":["Using device: cuda\n"]},{"output_type":"execute_result","data":{"text/plain":["MobileNetV3(\n","  (features): Sequential(\n","    (0): Conv2dNormActivation(\n","      (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (1): BatchNorm2d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","      (2): Hardswish()\n","    )\n","    (1): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)\n","          (1): BatchNorm2d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): ReLU(inplace=True)\n","        )\n","        (1): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (2): Conv2dNormActivation(\n","          (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (2): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(16, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(72, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): ReLU(inplace=True)\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(72, 72, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=72, bias=False)\n","          (1): BatchNorm2d(72, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): ReLU(inplace=True)\n","        )\n","        (2): Conv2dNormActivation(\n","          (0): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(24, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (3): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(24, 88, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(88, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): ReLU(inplace=True)\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(88, 88, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=88, bias=False)\n","          (1): BatchNorm2d(88, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): ReLU(inplace=True)\n","        )\n","        (2): Conv2dNormActivation(\n","          (0): Conv2d(88, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(24, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (4): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(96, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(96, 96, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=96, bias=False)\n","          (1): BatchNorm2d(96, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(96, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(40, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (5): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(240, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n","          (1): BatchNorm2d(240, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(240, 64, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(64, 240, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(40, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (6): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(240, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n","          (1): BatchNorm2d(240, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(240, 64, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(64, 240, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(40, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (7): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(120, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)\n","          (1): BatchNorm2d(120, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(120, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(48, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (8): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(48, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(144, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=144, bias=False)\n","          (1): BatchNorm2d(144, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(40, 144, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(144, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(48, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (9): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(288, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(288, 288, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=288, bias=False)\n","          (1): BatchNorm2d(288, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(288, 72, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(72, 288, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(288, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(96, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (10): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(576, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(576, 576, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=576, bias=False)\n","          (1): BatchNorm2d(576, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(576, 144, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(144, 576, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(96, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (11): InvertedResidual(\n","      (block): Sequential(\n","        (0): Conv2dNormActivation(\n","          (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(576, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (1): Conv2dNormActivation(\n","          (0): Conv2d(576, 576, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=576, bias=False)\n","          (1): BatchNorm2d(576, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","          (2): Hardswish()\n","        )\n","        (2): SqueezeExcitation(\n","          (avgpool): AdaptiveAvgPool2d(output_size=1)\n","          (fc1): Conv2d(576, 144, kernel_size=(1, 1), stride=(1, 1))\n","          (fc2): Conv2d(144, 576, kernel_size=(1, 1), stride=(1, 1))\n","          (activation): ReLU()\n","          (scale_activation): Hardsigmoid()\n","        )\n","        (3): Conv2dNormActivation(\n","          (0): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(96, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","        )\n","      )\n","    )\n","    (12): Conv2dNormActivation(\n","      (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (1): BatchNorm2d(576, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)\n","      (2): Hardswish()\n","    )\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=1)\n","  (classifier): Sequential(\n","    (0): Linear(in_features=576, out_features=1024, bias=True)\n","    (1): Hardswish()\n","    (2): Dropout(p=0.2, inplace=True)\n","    (3): Linear(in_features=1024, out_features=11, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":11}],"source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(f\"Using device: {device}\")\n","\n","model.to(device)"]},{"cell_type":"code","execution_count":null,"id":"q_w-5czPGa2Z","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1736832005217,"user":{"displayName":"Vinícius Meireles Pereira Santos","userId":"14026147295438053508"},"user_tz":180},"id":"q_w-5czPGa2Z","outputId":"0d1f5338-c1f1-49b0-af17-a8d5fe4debf1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Tue Jan 14 05:20:05 2025       \n","+---------------------------------------------------------------------------------------+\n","| NVIDIA-SMI 535.104.05             Driver Version: 535.104.05   CUDA Version: 12.2     |\n","|-----------------------------------------+----------------------+----------------------+\n","| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n","|                                         |                      |               MIG M. |\n","|=========================================+======================+======================|\n","|   0  Tesla T4                       Off | 00000000:00:04.0 Off |                    0 |\n","| N/A   44C    P0              26W /  70W |    127MiB / 15360MiB |      3%      Default |\n","|                                         |                      |                  N/A |\n","+-----------------------------------------+----------------------+----------------------+\n","                                                                                         \n","+---------------------------------------------------------------------------------------+\n","| Processes:                                                                            |\n","|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n","|        ID   ID                                                             Usage      |\n","|=======================================================================================|\n","+---------------------------------------------------------------------------------------+\n"]}],"source":["!nvidia-smi\n"]},{"cell_type":"markdown","id":"ob-MHJFKK40g","metadata":{"id":"ob-MHJFKK40g"},"source":["#Definição da função de perda e do otimizador"]},{"cell_type":"code","execution_count":null,"id":"Bp18dVEdK-qs","metadata":{"id":"Bp18dVEdK-qs"},"outputs":[],"source":["# Função de perda\n","criterion = nn.CrossEntropyLoss()\n","\n","# Otimizador\n","optimizer = optim.Adam(model.parameters(), lr=lr)"]},{"cell_type":"markdown","id":"b2L-9XHxLTaA","metadata":{"id":"b2L-9XHxLTaA"},"source":["#Treinando o Modelo"]},{"cell_type":"code","execution_count":null,"id":"w9jH1A7ULX4I","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"w9jH1A7ULX4I","executionInfo":{"status":"ok","timestamp":1736841735882,"user_tz":180,"elapsed":9730673,"user":{"displayName":"Vinícius Meireles Pereira Santos","userId":"14026147295438053508"}},"outputId":"fe002fcd-8070-4866-aef6-7dcfc3083c57"},"outputs":[{"output_type":"stream","name":"stdout","text":["Treinamento - epoca 0\n","Validacao - epoca 0\n","Epoch 0/99 - TRAIN Loss: 0.6608 TRAIN Acc: 0.7801 - VAL. Loss: 0.5679 VAL. Acc: 0.8236 (2482.8437 seconds)\n","Treinamento - epoca 1\n","Validacao - epoca 1\n","Epoch 1/99 - TRAIN Loss: 0.3227 TRAIN Acc: 0.8884 - VAL. Loss: 0.4607 VAL. Acc: 0.8586 (75.0967 seconds)\n","Treinamento - epoca 2\n","Validacao - epoca 2\n","Epoch 2/99 - TRAIN Loss: 0.2496 TRAIN Acc: 0.9107 - VAL. Loss: 0.5004 VAL. Acc: 0.8499 (73.3383 seconds)\n","Treinamento - epoca 3\n","Validacao - epoca 3\n","Epoch 3/99 - TRAIN Loss: 0.2685 TRAIN Acc: 0.9071 - VAL. Loss: 0.5957 VAL. Acc: 0.8462 (72.5771 seconds)\n","Treinamento - epoca 4\n","Validacao - epoca 4\n","Epoch 4/99 - TRAIN Loss: 0.2527 TRAIN Acc: 0.9119 - VAL. Loss: 0.6757 VAL. Acc: 0.8251 (73.3261 seconds)\n","Treinamento - epoca 5\n","Validacao - epoca 5\n","Epoch 5/99 - TRAIN Loss: 0.2056 TRAIN Acc: 0.9300 - VAL. Loss: 0.4727 VAL. Acc: 0.8732 (73.3836 seconds)\n","Treinamento - epoca 6\n","Validacao - epoca 6\n","Epoch 6/99 - TRAIN Loss: 0.1764 TRAIN Acc: 0.9400 - VAL. Loss: 0.5397 VAL. Acc: 0.8630 (72.3529 seconds)\n","Treinamento - epoca 7\n","Validacao - epoca 7\n","Epoch 7/99 - TRAIN Loss: 0.1821 TRAIN Acc: 0.9386 - VAL. Loss: 0.5713 VAL. Acc: 0.8644 (73.4905 seconds)\n","Treinamento - epoca 8\n","Validacao - epoca 8\n","Epoch 8/99 - TRAIN Loss: 0.1143 TRAIN Acc: 0.9600 - VAL. Loss: 0.5245 VAL. Acc: 0.8717 (72.2401 seconds)\n","Treinamento - epoca 9\n","Validacao - epoca 9\n","Epoch 9/99 - TRAIN Loss: 0.0965 TRAIN Acc: 0.9679 - VAL. Loss: 0.4876 VAL. Acc: 0.8666 (73.3826 seconds)\n","Treinamento - epoca 10\n","Validacao - epoca 10\n","Epoch 10/99 - TRAIN Loss: 0.1059 TRAIN Acc: 0.9652 - VAL. Loss: 0.5122 VAL. Acc: 0.8688 (73.5895 seconds)\n","Treinamento - epoca 11\n","Validacao - epoca 11\n","Epoch 11/99 - TRAIN Loss: 0.0882 TRAIN Acc: 0.9700 - VAL. Loss: 0.6182 VAL. Acc: 0.8622 (72.0786 seconds)\n","Treinamento - epoca 12\n","Validacao - epoca 12\n","Epoch 12/99 - TRAIN Loss: 0.1027 TRAIN Acc: 0.9654 - VAL. Loss: 0.5558 VAL. Acc: 0.8739 (72.4422 seconds)\n","Treinamento - epoca 13\n","Validacao - epoca 13\n","Epoch 13/99 - TRAIN Loss: 0.1478 TRAIN Acc: 0.9557 - VAL. Loss: 0.6673 VAL. Acc: 0.8739 (74.4179 seconds)\n","Treinamento - epoca 14\n","Validacao - epoca 14\n","Epoch 14/99 - TRAIN Loss: 0.1273 TRAIN Acc: 0.9571 - VAL. Loss: 0.5810 VAL. Acc: 0.8535 (72.8547 seconds)\n","Treinamento - epoca 15\n","Validacao - epoca 15\n","Epoch 15/99 - TRAIN Loss: 0.1526 TRAIN Acc: 0.9502 - VAL. Loss: 0.5686 VAL. Acc: 0.8739 (72.2195 seconds)\n","Treinamento - epoca 16\n","Validacao - epoca 16\n","Epoch 16/99 - TRAIN Loss: 0.1156 TRAIN Acc: 0.9636 - VAL. Loss: 0.4726 VAL. Acc: 0.8878 (74.1679 seconds)\n","Treinamento - epoca 17\n","Validacao - epoca 17\n","Epoch 17/99 - TRAIN Loss: 0.1601 TRAIN Acc: 0.9436 - VAL. Loss: 0.7085 VAL. Acc: 0.8542 (72.7630 seconds)\n","Treinamento - epoca 18\n","Validacao - epoca 18\n","Epoch 18/99 - TRAIN Loss: 0.1339 TRAIN Acc: 0.9573 - VAL. Loss: 1.0427 VAL. Acc: 0.8389 (73.3796 seconds)\n","Treinamento - epoca 19\n","Validacao - epoca 19\n","Epoch 19/99 - TRAIN Loss: 0.1224 TRAIN Acc: 0.9611 - VAL. Loss: 0.7060 VAL. Acc: 0.8491 (74.3056 seconds)\n","Treinamento - epoca 20\n","Validacao - epoca 20\n","Epoch 20/99 - TRAIN Loss: 0.1869 TRAIN Acc: 0.9392 - VAL. Loss: 0.5894 VAL. Acc: 0.8659 (74.4640 seconds)\n","Treinamento - epoca 21\n","Validacao - epoca 21\n","Epoch 21/99 - TRAIN Loss: 0.1454 TRAIN Acc: 0.9557 - VAL. Loss: 0.6932 VAL. Acc: 0.8608 (74.5064 seconds)\n","Treinamento - epoca 22\n","Validacao - epoca 22\n","Epoch 22/99 - TRAIN Loss: 0.1417 TRAIN Acc: 0.9563 - VAL. Loss: 0.6196 VAL. Acc: 0.8484 (74.5834 seconds)\n","Treinamento - epoca 23\n","Validacao - epoca 23\n","Epoch 23/99 - TRAIN Loss: 0.1178 TRAIN Acc: 0.9588 - VAL. Loss: 0.5752 VAL. Acc: 0.8688 (72.7349 seconds)\n","Treinamento - epoca 24\n","Validacao - epoca 24\n","Epoch 24/99 - TRAIN Loss: 0.1665 TRAIN Acc: 0.9496 - VAL. Loss: 0.5067 VAL. Acc: 0.8717 (74.6650 seconds)\n","Treinamento - epoca 25\n","Validacao - epoca 25\n","Epoch 25/99 - TRAIN Loss: 0.1072 TRAIN Acc: 0.9606 - VAL. Loss: 0.7298 VAL. Acc: 0.8586 (72.5406 seconds)\n","Treinamento - epoca 26\n","Validacao - epoca 26\n","Epoch 26/99 - TRAIN Loss: 0.1526 TRAIN Acc: 0.9606 - VAL. Loss: 0.5276 VAL. Acc: 0.8819 (74.6517 seconds)\n","Treinamento - epoca 27\n","Validacao - epoca 27\n","Epoch 27/99 - TRAIN Loss: 0.0861 TRAIN Acc: 0.9733 - VAL. Loss: 0.5670 VAL. Acc: 0.8710 (72.5979 seconds)\n","Treinamento - epoca 28\n","Validacao - epoca 28\n","Epoch 28/99 - TRAIN Loss: 0.0795 TRAIN Acc: 0.9746 - VAL. Loss: 0.4680 VAL. Acc: 0.8987 (74.2946 seconds)\n","Treinamento - epoca 29\n","Validacao - epoca 29\n","Epoch 29/99 - TRAIN Loss: 0.0522 TRAIN Acc: 0.9840 - VAL. Loss: 0.5161 VAL. Acc: 0.8841 (74.2424 seconds)\n","Treinamento - epoca 30\n","Validacao - epoca 30\n","Epoch 30/99 - TRAIN Loss: 0.0274 TRAIN Acc: 0.9904 - VAL. Loss: 0.5529 VAL. Acc: 0.8870 (75.2895 seconds)\n","Treinamento - epoca 31\n","Validacao - epoca 31\n","Epoch 31/99 - TRAIN Loss: 0.1225 TRAIN Acc: 0.9631 - VAL. Loss: 0.8889 VAL. Acc: 0.8047 (73.7620 seconds)\n","Treinamento - epoca 32\n","Validacao - epoca 32\n","Epoch 32/99 - TRAIN Loss: 0.0918 TRAIN Acc: 0.9700 - VAL. Loss: 0.5654 VAL. Acc: 0.8805 (73.4920 seconds)\n","Treinamento - epoca 33\n","Validacao - epoca 33\n","Epoch 33/99 - TRAIN Loss: 0.1761 TRAIN Acc: 0.9527 - VAL. Loss: 0.5241 VAL. Acc: 0.8834 (72.0350 seconds)\n","Treinamento - epoca 34\n","Validacao - epoca 34\n","Epoch 34/99 - TRAIN Loss: 0.1420 TRAIN Acc: 0.9525 - VAL. Loss: 0.5175 VAL. Acc: 0.8710 (72.5464 seconds)\n","Treinamento - epoca 35\n","Validacao - epoca 35\n","Epoch 35/99 - TRAIN Loss: 0.0848 TRAIN Acc: 0.9700 - VAL. Loss: 0.5420 VAL. Acc: 0.8776 (74.4342 seconds)\n","Treinamento - epoca 36\n","Validacao - epoca 36\n","Epoch 36/99 - TRAIN Loss: 0.1307 TRAIN Acc: 0.9600 - VAL. Loss: 0.5367 VAL. Acc: 0.8827 (72.3607 seconds)\n","Treinamento - epoca 37\n","Validacao - epoca 37\n","Epoch 37/99 - TRAIN Loss: 0.0620 TRAIN Acc: 0.9794 - VAL. Loss: 0.5985 VAL. Acc: 0.8739 (72.7352 seconds)\n","Treinamento - epoca 38\n","Validacao - epoca 38\n","Epoch 38/99 - TRAIN Loss: 0.2805 TRAIN Acc: 0.9138 - VAL. Loss: 0.6869 VAL. Acc: 0.8171 (73.7707 seconds)\n","Treinamento - epoca 39\n","Validacao - epoca 39\n","Epoch 39/99 - TRAIN Loss: 0.1291 TRAIN Acc: 0.9565 - VAL. Loss: 0.5051 VAL. Acc: 0.8776 (73.5843 seconds)\n","Treinamento - epoca 40\n","Validacao - epoca 40\n","Epoch 40/99 - TRAIN Loss: 0.0907 TRAIN Acc: 0.9665 - VAL. Loss: 0.5775 VAL. Acc: 0.8724 (72.1440 seconds)\n","Treinamento - epoca 41\n","Validacao - epoca 41\n","Epoch 41/99 - TRAIN Loss: 0.0664 TRAIN Acc: 0.9777 - VAL. Loss: 0.5762 VAL. Acc: 0.8878 (72.5678 seconds)\n","Treinamento - epoca 42\n","Validacao - epoca 42\n","Epoch 42/99 - TRAIN Loss: 0.0553 TRAIN Acc: 0.9819 - VAL. Loss: 0.6509 VAL. Acc: 0.8805 (72.4355 seconds)\n","Treinamento - epoca 43\n","Validacao - epoca 43\n","Epoch 43/99 - TRAIN Loss: 0.0935 TRAIN Acc: 0.9700 - VAL. Loss: 0.6892 VAL. Acc: 0.8695 (73.2343 seconds)\n","Treinamento - epoca 44\n","Validacao - epoca 44\n","Epoch 44/99 - TRAIN Loss: 0.1063 TRAIN Acc: 0.9675 - VAL. Loss: 0.5325 VAL. Acc: 0.8856 (72.4871 seconds)\n","Treinamento - epoca 45\n","Validacao - epoca 45\n","Epoch 45/99 - TRAIN Loss: 0.0943 TRAIN Acc: 0.9696 - VAL. Loss: 0.5494 VAL. Acc: 0.8834 (73.4390 seconds)\n","Treinamento - epoca 46\n","Validacao - epoca 46\n","Epoch 46/99 - TRAIN Loss: 0.0792 TRAIN Acc: 0.9750 - VAL. Loss: 0.6057 VAL. Acc: 0.8724 (72.8195 seconds)\n","Treinamento - epoca 47\n","Validacao - epoca 47\n","Epoch 47/99 - TRAIN Loss: 0.0373 TRAIN Acc: 0.9852 - VAL. Loss: 0.5776 VAL. Acc: 0.8907 (73.4428 seconds)\n","Treinamento - epoca 48\n","Validacao - epoca 48\n","Epoch 48/99 - TRAIN Loss: 0.1021 TRAIN Acc: 0.9729 - VAL. Loss: 0.8248 VAL. Acc: 0.8382 (73.7921 seconds)\n","Treinamento - epoca 49\n","Validacao - epoca 49\n","Epoch 49/99 - TRAIN Loss: 0.0832 TRAIN Acc: 0.9750 - VAL. Loss: 0.6205 VAL. Acc: 0.8732 (71.9731 seconds)\n","Treinamento - epoca 50\n","Validacao - epoca 50\n","Epoch 50/99 - TRAIN Loss: 0.0551 TRAIN Acc: 0.9808 - VAL. Loss: 0.6799 VAL. Acc: 0.8761 (73.1152 seconds)\n","Treinamento - epoca 51\n","Validacao - epoca 51\n","Epoch 51/99 - TRAIN Loss: 0.0597 TRAIN Acc: 0.9817 - VAL. Loss: 0.6151 VAL. Acc: 0.8732 (75.4447 seconds)\n","Treinamento - epoca 52\n","Validacao - epoca 52\n","Epoch 52/99 - TRAIN Loss: 0.0517 TRAIN Acc: 0.9833 - VAL. Loss: 0.6026 VAL. Acc: 0.8622 (73.0536 seconds)\n","Treinamento - epoca 53\n","Validacao - epoca 53\n","Epoch 53/99 - TRAIN Loss: 0.2042 TRAIN Acc: 0.9380 - VAL. Loss: 0.6576 VAL. Acc: 0.8535 (73.2743 seconds)\n","Treinamento - epoca 54\n","Validacao - epoca 54\n","Epoch 54/99 - TRAIN Loss: 0.1233 TRAIN Acc: 0.9613 - VAL. Loss: 0.6091 VAL. Acc: 0.8710 (74.0506 seconds)\n","Treinamento - epoca 55\n","Validacao - epoca 55\n","Epoch 55/99 - TRAIN Loss: 0.1374 TRAIN Acc: 0.9634 - VAL. Loss: 0.7033 VAL. Acc: 0.8367 (74.9432 seconds)\n","Treinamento - epoca 56\n","Validacao - epoca 56\n","Epoch 56/99 - TRAIN Loss: 0.0795 TRAIN Acc: 0.9761 - VAL. Loss: 0.5707 VAL. Acc: 0.8819 (72.5461 seconds)\n","Treinamento - epoca 57\n","Validacao - epoca 57\n","Epoch 57/99 - TRAIN Loss: 0.0777 TRAIN Acc: 0.9723 - VAL. Loss: 0.6223 VAL. Acc: 0.8688 (72.9994 seconds)\n","Treinamento - epoca 58\n","Validacao - epoca 58\n","Epoch 58/99 - TRAIN Loss: 0.0624 TRAIN Acc: 0.9798 - VAL. Loss: 0.6524 VAL. Acc: 0.8805 (73.7344 seconds)\n","Treinamento - epoca 59\n","Validacao - epoca 59\n","Epoch 59/99 - TRAIN Loss: 0.0282 TRAIN Acc: 0.9908 - VAL. Loss: 0.6474 VAL. Acc: 0.8848 (73.1659 seconds)\n","Treinamento - epoca 60\n","Validacao - epoca 60\n","Epoch 60/99 - TRAIN Loss: 0.0705 TRAIN Acc: 0.9794 - VAL. Loss: 0.5935 VAL. Acc: 0.8841 (73.2832 seconds)\n","Treinamento - epoca 61\n","Validacao - epoca 61\n","Epoch 61/99 - TRAIN Loss: 0.0535 TRAIN Acc: 0.9836 - VAL. Loss: 0.6281 VAL. Acc: 0.8841 (74.2371 seconds)\n","Treinamento - epoca 62\n","Validacao - epoca 62\n","Epoch 62/99 - TRAIN Loss: 0.0448 TRAIN Acc: 0.9854 - VAL. Loss: 0.6122 VAL. Acc: 0.8936 (73.9609 seconds)\n","Treinamento - epoca 63\n","Validacao - epoca 63\n","Epoch 63/99 - TRAIN Loss: 0.0180 TRAIN Acc: 0.9931 - VAL. Loss: 0.6447 VAL. Acc: 0.8907 (73.7288 seconds)\n","Treinamento - epoca 64\n","Validacao - epoca 64\n","Epoch 64/99 - TRAIN Loss: 0.0894 TRAIN Acc: 0.9736 - VAL. Loss: 0.6062 VAL. Acc: 0.8929 (74.4737 seconds)\n","Treinamento - epoca 65\n","Validacao - epoca 65\n","Epoch 65/99 - TRAIN Loss: 0.0195 TRAIN Acc: 0.9927 - VAL. Loss: 0.6776 VAL. Acc: 0.8899 (72.3674 seconds)\n","Treinamento - epoca 66\n","Validacao - epoca 66\n","Epoch 66/99 - TRAIN Loss: 0.0266 TRAIN Acc: 0.9929 - VAL. Loss: 0.6700 VAL. Acc: 0.8921 (72.9668 seconds)\n","Treinamento - epoca 67\n","Validacao - epoca 67\n","Epoch 67/99 - TRAIN Loss: 0.0476 TRAIN Acc: 0.9867 - VAL. Loss: 0.6305 VAL. Acc: 0.8914 (73.3645 seconds)\n","Treinamento - epoca 68\n","Validacao - epoca 68\n","Epoch 68/99 - TRAIN Loss: 0.0151 TRAIN Acc: 0.9954 - VAL. Loss: 0.6446 VAL. Acc: 0.8965 (73.6360 seconds)\n","Treinamento - epoca 69\n","Validacao - epoca 69\n","Epoch 69/99 - TRAIN Loss: 0.0269 TRAIN Acc: 0.9917 - VAL. Loss: 0.6888 VAL. Acc: 0.8812 (72.2457 seconds)\n","Treinamento - epoca 70\n","Validacao - epoca 70\n","Epoch 70/99 - TRAIN Loss: 0.0192 TRAIN Acc: 0.9933 - VAL. Loss: 0.6639 VAL. Acc: 0.8921 (72.1176 seconds)\n","Treinamento - epoca 71\n","Validacao - epoca 71\n","Epoch 71/99 - TRAIN Loss: 0.1149 TRAIN Acc: 0.9715 - VAL. Loss: 0.9322 VAL. Acc: 0.8593 (73.7024 seconds)\n","Treinamento - epoca 72\n","Validacao - epoca 72\n","Epoch 72/99 - TRAIN Loss: 0.1302 TRAIN Acc: 0.9598 - VAL. Loss: 0.7711 VAL. Acc: 0.8542 (72.1321 seconds)\n","Treinamento - epoca 73\n","Validacao - epoca 73\n","Epoch 73/99 - TRAIN Loss: 0.1285 TRAIN Acc: 0.9561 - VAL. Loss: 0.8615 VAL. Acc: 0.8251 (72.0132 seconds)\n","Treinamento - epoca 74\n","Validacao - epoca 74\n","Epoch 74/99 - TRAIN Loss: 0.0880 TRAIN Acc: 0.9690 - VAL. Loss: 0.6621 VAL. Acc: 0.8652 (75.0927 seconds)\n","Treinamento - epoca 75\n","Validacao - epoca 75\n","Epoch 75/99 - TRAIN Loss: 0.0403 TRAIN Acc: 0.9861 - VAL. Loss: 0.6434 VAL. Acc: 0.8870 (73.0910 seconds)\n","Treinamento - epoca 76\n","Validacao - epoca 76\n","Epoch 76/99 - TRAIN Loss: 0.0488 TRAIN Acc: 0.9840 - VAL. Loss: 0.9344 VAL. Acc: 0.8382 (72.2715 seconds)\n","Treinamento - epoca 77\n","Validacao - epoca 77\n","Epoch 77/99 - TRAIN Loss: 0.1800 TRAIN Acc: 0.9586 - VAL. Loss: 0.8762 VAL. Acc: 0.8120 (72.8569 seconds)\n","Treinamento - epoca 78\n","Validacao - epoca 78\n","Epoch 78/99 - TRAIN Loss: 0.0848 TRAIN Acc: 0.9702 - VAL. Loss: 0.8233 VAL. Acc: 0.8469 (74.4554 seconds)\n","Treinamento - epoca 79\n","Validacao - epoca 79\n","Epoch 79/99 - TRAIN Loss: 0.0589 TRAIN Acc: 0.9821 - VAL. Loss: 0.7355 VAL. Acc: 0.8732 (73.1309 seconds)\n","Treinamento - epoca 80\n","Validacao - epoca 80\n","Epoch 80/99 - TRAIN Loss: 0.0585 TRAIN Acc: 0.9825 - VAL. Loss: 0.6578 VAL. Acc: 0.8863 (72.4448 seconds)\n","Treinamento - epoca 81\n","Validacao - epoca 81\n","Epoch 81/99 - TRAIN Loss: 0.0888 TRAIN Acc: 0.9723 - VAL. Loss: 0.6261 VAL. Acc: 0.8885 (73.3488 seconds)\n","Treinamento - epoca 82\n","Validacao - epoca 82\n","Epoch 82/99 - TRAIN Loss: 0.0521 TRAIN Acc: 0.9829 - VAL. Loss: 0.6054 VAL. Acc: 0.8827 (73.1933 seconds)\n","Treinamento - epoca 83\n","Validacao - epoca 83\n","Epoch 83/99 - TRAIN Loss: 0.0963 TRAIN Acc: 0.9700 - VAL. Loss: 0.6612 VAL. Acc: 0.8754 (72.6174 seconds)\n","Treinamento - epoca 84\n","Validacao - epoca 84\n","Epoch 84/99 - TRAIN Loss: 0.0585 TRAIN Acc: 0.9838 - VAL. Loss: 0.6701 VAL. Acc: 0.8746 (72.9186 seconds)\n","Treinamento - epoca 85\n","Validacao - epoca 85\n","Epoch 85/99 - TRAIN Loss: 0.0868 TRAIN Acc: 0.9719 - VAL. Loss: 0.5884 VAL. Acc: 0.8790 (73.7459 seconds)\n","Treinamento - epoca 86\n","Validacao - epoca 86\n","Epoch 86/99 - TRAIN Loss: 0.0301 TRAIN Acc: 0.9900 - VAL. Loss: 0.6174 VAL. Acc: 0.8856 (72.5042 seconds)\n","Treinamento - epoca 87\n","Validacao - epoca 87\n","Epoch 87/99 - TRAIN Loss: 0.0245 TRAIN Acc: 0.9929 - VAL. Loss: 0.6543 VAL. Acc: 0.8863 (72.2992 seconds)\n","Treinamento - epoca 88\n","Validacao - epoca 88\n","Epoch 88/99 - TRAIN Loss: 0.0508 TRAIN Acc: 0.9829 - VAL. Loss: 0.6265 VAL. Acc: 0.8885 (72.6181 seconds)\n","Treinamento - epoca 89\n","Validacao - epoca 89\n","Epoch 89/99 - TRAIN Loss: 0.0466 TRAIN Acc: 0.9863 - VAL. Loss: 0.6863 VAL. Acc: 0.8739 (72.3582 seconds)\n","Treinamento - epoca 90\n","Validacao - epoca 90\n","Epoch 90/99 - TRAIN Loss: 0.0229 TRAIN Acc: 0.9919 - VAL. Loss: 0.6792 VAL. Acc: 0.8907 (72.4230 seconds)\n","Treinamento - epoca 91\n","Validacao - epoca 91\n","Epoch 91/99 - TRAIN Loss: 0.1165 TRAIN Acc: 0.9715 - VAL. Loss: 0.8597 VAL. Acc: 0.8222 (73.4644 seconds)\n","Treinamento - epoca 92\n","Validacao - epoca 92\n","Epoch 92/99 - TRAIN Loss: 0.0299 TRAIN Acc: 0.9896 - VAL. Loss: 0.7024 VAL. Acc: 0.8834 (72.1224 seconds)\n","Treinamento - epoca 93\n","Validacao - epoca 93\n","Epoch 93/99 - TRAIN Loss: 0.0406 TRAIN Acc: 0.9877 - VAL. Loss: 0.7222 VAL. Acc: 0.8746 (71.6964 seconds)\n","Treinamento - epoca 94\n","Validacao - epoca 94\n","Epoch 94/99 - TRAIN Loss: 0.0485 TRAIN Acc: 0.9838 - VAL. Loss: 0.7453 VAL. Acc: 0.8732 (72.2696 seconds)\n","Treinamento - epoca 95\n","Validacao - epoca 95\n","Epoch 95/99 - TRAIN Loss: 0.0959 TRAIN Acc: 0.9702 - VAL. Loss: 0.6863 VAL. Acc: 0.8746 (73.3223 seconds)\n","Treinamento - epoca 96\n","Validacao - epoca 96\n","Epoch 96/99 - TRAIN Loss: 0.0841 TRAIN Acc: 0.9746 - VAL. Loss: 0.7057 VAL. Acc: 0.8761 (72.2315 seconds)\n","Treinamento - epoca 97\n","Validacao - epoca 97\n","Epoch 97/99 - TRAIN Loss: 0.0353 TRAIN Acc: 0.9883 - VAL. Loss: 0.6154 VAL. Acc: 0.8980 (72.1357 seconds)\n","Treinamento - epoca 98\n","Validacao - epoca 98\n","Epoch 98/99 - TRAIN Loss: 0.0228 TRAIN Acc: 0.9921 - VAL. Loss: 0.6754 VAL. Acc: 0.8892 (73.0261 seconds)\n","Treinamento - epoca 99\n","Validacao - epoca 99\n","Epoch 99/99 - TRAIN Loss: 0.0933 TRAIN Acc: 0.9744 - VAL. Loss: 0.6826 VAL. Acc: 0.8666 (72.0681 seconds)\n","\n","Treinamento finalizado. (162m and 10s)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["\n","#para retomar o  treinamento do último checkpoint salvo (em caso de queda do ambiente de execução)\n","start_epoch=0\n","\n","\"\"\"\n","# Carregar o checkpoint completo\n","checkpoint = torch.load('/content/drive/MyDrive/Projetos/Projeto2Visao/Testes/MobileNet/100epocas/checkpoint.pth')\n","\n","# Reconstruir o modelo e otimizador\n","model = models.mobilenet_v3_small(pretrained=False)\n","model.classifier[3] = nn.Linear(model.classifier[3].in_features, num_classes)\n","model.to(device)\n","\n","optimizer = optim.Adam(model.parameters(), lr=lr)\n","\n","# Restaurar os estados\n","model.load_state_dict(checkpoint['model_state_dict'])\n","optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n","start_epoch = checkpoint['epoch'] + 1  # Para continuar do próximo\n","loss = checkpoint['loss']  # Opcional: carregar última perda\n","\n","# Agora você pode continuar treinando\n","\n","\"\"\"\n","\n","\n","# Tempo total do treinamento (treinamento e validação)\n","time_total_start = time.time()\n","\n","# Lista das perdas (loss) e acurácias (accuracy) de treino para cada época.\n","train_loss_list = []\n","train_acc_list = []\n","\n","# Lista das perdas (loss) e acurácias (accuracy) de validação para cada época.\n","val_loss_list = []\n","val_acc_list = []\n","\n","# Melhor acurácia de validação\n","best_val_acc = 0.0\n","\n","# Inicializa a figura para o acompanhamento visual\n","plt.ion()\n","fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5))\n","\n","for epoch in range(start_epoch, epochs):\n","    print(f\"Treinamento - epoca {epoch}\")\n","    # TREINAMENTO\n","    # =========================================================================\n","    # Inicia contagem de tempo da época\n","    time_epoch_start = time.time()\n","\n","    # Habilita o modelo para o modo de treino\n","    model.train()\n","\n","    # Perda (loss) nesta época\n","    loss_epoch_train = 0.0\n","    # Amostras classificadas corretamente nesta época\n","    num_hits_epoch_train = 0\n","\n","    # Iterate along the batches of the TRAINING SET\n","    for inputs, labels in train_dataloader:\n","        inputs, labels = inputs.to(device), labels.to(device)\n","\n","        # Zera os parametros do gradiente\n","        optimizer.zero_grad()\n","\n","        # FORWARD\n","        # ------>\n","        # Habilita o cálculo do gradiente\n","        torch.set_grad_enabled(True)\n","\n","        # Saída do modelo para o lote\n","        outputs = model(inputs)\n","\n","        # 'outputs' está em porcentagens. Tomar os máximos como resposta.\n","        preds = torch.argmax(outputs, dim=1)\n","\n","        # Calcula a perda (loss)\n","        loss = criterion(outputs, labels)\n","\n","        # BACKWARD\n","        # <-------\n","        loss.backward()\n","\n","        # Atualiza os parâmetros da rede\n","        optimizer.step()\n","\n","        # Atualiza a perda da época\n","        loss_epoch_train += loss.item() * inputs.size(0)\n","\n","        # Atualiza o número de amostras classificadas corretamente na época.\n","        num_hits_epoch_train += torch.sum(preds == labels.data)\n","\n","    # Perda desta época\n","    train_loss = loss_epoch_train / train_size\n","    # Acurácia desta época\n","    train_acc = num_hits_epoch_train.double() / train_size\n","\n","    # Store loss and accuracy in lists\n","    train_loss_list.append(train_loss)\n","    train_acc_list.append(train_acc.cpu().item())  # Move para CPU e converte para float\n","\n","    # VALIDAÇÃO\n","    # =========================================================================\n","    model.eval()\n","    print(f\"Validacao - epoca {epoch}\")\n","\n","    # Pego o número de perda e o número de acertos\n","    loss_epoch_val = 0.0 # Atual perda\n","    num_hits_epoch_val = 0 # Número de itens corretos\n","\n","    # Iterate along the batches of the VALIDATION SET\n","    with torch.no_grad():\n","        for inputs, labels in val_dataloader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","\n","            # Gero um tensor cujas linhas representam o tamanho do \"batch\" do input\n","            outputs = model(inputs)\n","\n","            # Retorna a maior predição.\n","            preds = torch.argmax(outputs, dim=1)\n","\n","            # Calcula a perda (loss)\n","            loss = criterion(outputs, labels)\n","\n","            # Atualiza a perda da época\n","            loss_epoch_val += loss.item() * inputs.size(0)\n","            # Atualiza os acertos da época\n","            num_hits_epoch_val += torch.sum(preds == labels.data)\n","\n","    # Perda e acurácia do conjunto de validação para esta época\n","    val_loss = loss_epoch_val / val_size\n","    val_acc = num_hits_epoch_val.double() / val_size\n","\n","    # Store loss and accuracy in lists\n","    val_loss_list.append(val_loss)\n","    val_acc_list.append(val_acc.cpu().item())  # Move para CPU e converte para float\n","\n","    # Salvar o melhor modelo\n","    if val_acc > best_val_acc:\n","        best_val_acc = val_acc\n","        torch.save({\n","            'epoch': epoch,\n","            'model_state_dict': model.state_dict(),\n","            'optimizer_state_dict': optimizer.state_dict(),\n","            'loss': loss\n","        }, '/content/drive/MyDrive/Projetos/Projeto2Visao/Testes/MobileNet/100epocas/checkpoint.pth')\n","\n","    # Tempo total desta época\n","    time_epoch = time.time() - time_epoch_start\n","\n","    # PRINTING\n","    # --------\n","    print('Epoch {}/{} - TRAIN Loss: {:.4f} TRAIN Acc: {:.4f} - VAL. Loss: {:.4f} VAL. Acc: {:.4f} ({:.4f} seconds)'.format(epoch, epochs - 1, train_loss, train_acc, val_loss, val_acc, time_epoch))\n","\n","\n","# Tempo total do treinamento\n","time_total_train = time.time() - time_total_start\n","\n","# PRINTING\n","print('\\nTreinamento finalizado. ({0}m and {1}s)'.format(int(time_total_train // 60), int(time_total_train % 60)))\n"]},{"cell_type":"markdown","id":"UWyk32lOMUo7","metadata":{"id":"UWyk32lOMUo7"},"source":["#Analisando o Treinamento"]},{"cell_type":"code","execution_count":null,"id":"2UBLArEoMXK3","metadata":{"id":"2UBLArEoMXK3","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1736841736614,"user_tz":180,"elapsed":745,"user":{"displayName":"Vinícius Meireles Pereira Santos","userId":"14026147295438053508"}},"outputId":"e37f9ce6-8744-4ac0-bb84-e3341b87fb6e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Lista com os índices das épocas. [0, 1, ... num_epochs - 1]\n","epochs_list = list(range(len(train_loss_list)))\n","\n","# Títulos\n","loss_title = f'Loss over {len(epochs_list)} Epochs'\n","acc_title = f'Accuracy over {len(epochs_list)} Epochs'\n","\n","# Plot - Loss and Accuracy\n","fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5))\n","\n","# Plot - Loss\n","ax1.set_title(loss_title)\n","ax1.plot(epochs_list, train_loss_list, c='magenta', ls='--', label='Train Loss', fillstyle='none')\n","ax1.plot(epochs_list, val_loss_list, c='green', ls='--', label='Val. Loss', fillstyle='none')\n","ax1.set_xlabel('Epochs')\n","ax1.set_ylabel('Loss')\n","ax1.legend(loc='best')\n","ax1.grid(True)\n","\n","# Plot - Accuracy\n","ax2.set_title(acc_title)\n","ax2.plot(epochs_list, train_acc_list, c='magenta', ls='-', label='Train Accuracy', fillstyle='none')\n","ax2.plot(epochs_list, val_acc_list, c='green', ls='-', label='Val. Accuracy', fillstyle='none')\n","ax2.set_xlabel('Epochs')\n","ax2.set_ylabel('Accuracy')\n","ax2.legend(loc='best')\n","ax2.grid(True)\n","\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"markdown","id":"ewdIiYxyHfBE","metadata":{"id":"ewdIiYxyHfBE"},"source":["# Avaliando o Modelo"]},{"cell_type":"code","execution_count":null,"id":"2KIfkwVXHhej","metadata":{"id":"2KIfkwVXHhej","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736842046862,"user_tz":180,"elapsed":310261,"user":{"displayName":"Vinícius Meireles Pereira Santos","userId":"14026147295438053508"}},"outputId":"e61af04c-51e9-4fe8-dfb6-3bf84c6dfb17"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.\n","  warnings.warn(msg)\n","<ipython-input-16-6c7e0e041ae8>:13: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load('/content/drive/MyDrive/Projetos/Projeto2Visao/Testes/MobileNet/100epocas/checkpoint.pth')\n"]},{"output_type":"stream","name":"stdout","text":["Using device: cuda\n","Melhor Época 28\n"]}],"source":["# Carregando o modelo Pré-Treinado\n","model = models.mobilenet_v3_small(pretrained=False)\n","\n","# Altera o número de neurônios na cadama de saída.\n","model.classifier[3] = nn.Linear(model.classifier[3].in_features, num_classes)\n","\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(f\"Using device: {device}\")\n","\n","model.to(device)\n","\n","# Carregar o melhor modelo salvo\n","checkpoint = torch.load('/content/drive/MyDrive/Projetos/Projeto2Visao/Testes/MobileNet/100epocas/checkpoint.pth')\n","model.load_state_dict(checkpoint['model_state_dict'])\n","start_epoch = checkpoint['epoch']\n","\n","print(f\"Melhor Época {start_epoch}\")\n","\n","\n","model.eval()\n","\n","# Lista com as classes reais e classes preditas\n","true_test_list = []\n","pred_test_list = []\n","# Lista com as probabilidades\n","prob_test_list = []\n","\n","# Iterate along the batches of the TEST SET\n","with torch.no_grad():\n","    for img_list, labelList in test_dataloader:\n","        img_list, labelList = img_list.to(device), labelList.to(device)\n","\n","        # -----> FORWARD\n","        # Saída do modelo\n","        outputs = model(img_list)\n","\n","        # Predição\n","        preds = torch.argmax(outputs, dim=1)\n","\n","        # Calcula probabilidades\n","        outputs_prob = nn.functional.softmax(outputs, dim=1)\n","        prob_test_batch = outputs_prob.cpu().numpy()\n","\n","        # Classes reais (true) e classes preditas (pred) para este lote.\n","        true_test_batch = labelList.cpu().numpy()\n","        pred_test_batch = preds.cpu().numpy()\n","\n","        # Adiciona os resultados às listas\n","        true_test_list.extend(true_test_batch)\n","        pred_test_list.extend(pred_test_batch)\n","        prob_test_list.extend(prob_test_batch)\n"]},{"cell_type":"markdown","id":"ejTUVzQbMYlo","metadata":{"id":"ejTUVzQbMYlo"},"source":["# Matrix de Confusão e Relatório de Classificação"]},{"cell_type":"code","execution_count":null,"id":"wDnyqEx2McHu","metadata":{"id":"wDnyqEx2McHu","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1yO97U8QaAEdbsH3P_CWm6jA91YytyQsQ"},"executionInfo":{"status":"ok","timestamp":1736842052324,"user_tz":180,"elapsed":5467,"user":{"displayName":"Vinícius Meireles Pereira Santos","userId":"14026147295438053508"}},"outputId":"a432d8b5-eb68-4464-ab7c-870d5579cf03"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["conf_mat_test = metrics.confusion_matrix(true_test_list, pred_test_list)\n","plt.figure(figsize=(10, 8))\n","sns.heatmap(conf_mat_test, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)\n","plt.title('Matriz de Confusão')\n","plt.xlabel('Predicted')\n","plt.ylabel('True')\n","plt.show()\n","\n","# Classification report - Scikit-learn\n","class_rep_test = metrics.classification_report(true_test_list, pred_test_list,\n","                                              target_names=class_names, output_dict = True, #dicionário para uso pessoal\n","                                              digits=4,\n","                                              zero_division=0)\n","print('\\nClass. report (test)')\n","print(class_rep_test)\n","\n","print(\"Relatório de Classificação por Classe:\")\n","print(metrics.classification_report(true_test_list, pred_test_list,\n","                                    target_names=class_names,\n","                                    digits=4, zero_division=0))\n","\n","# Accuracy\n","acc_test = metrics.accuracy_score(true_test_list, pred_test_list)\n","print('\\n\\Test Acc.: {:.4f}'.format(acc_test))\n","\n","# Função para mostrar imagens\n","def imshow(inp, title=None):\n","    inp = inp.numpy().transpose((1, 2, 0))\n","    mean = np.array([0.485, 0.456, 0.406])\n","    std = np.array([0.229, 0.224, 0.225])\n","    inp = std * inp + mean\n","    inp = np.clip(inp, 0, 1)\n","    plt.imshow(inp)\n","    if title is not None:\n","        plt.title(title)\n","    plt.axis('off')\n","\n","# Obter um lote de dados de teste\n","inputs, classes = next(iter(test_dataloader))\n","\n","# Fazer previsões\n","outputs = model(inputs.to(device))\n","_, preds = torch.max(outputs, 1)\n","\n","# Plotar as imagens e suas previsões\n","plt.figure(figsize=(15, 10))\n","for i in range(min(len(inputs), 8)):  # Mostrar até 8 imagens\n","    ax = plt.subplot(2, 4, i + 1)\n","    imshow(inputs[i], title=f'Pred: {class_names[preds[i]]}\\nTrue: {class_names[classes[i]]}')\n","plt.tight_layout()\n","plt.show()\n","\n","\n","#POR CLASSE\n","#extração de métricas\n","precisoes=[class_rep_test[cls]['precision'] for cls in class_names]\n","recalls=[class_rep_test[cls]['recall'] for cls in class_names]\n","f1_scores=[class_rep_test[cls]['f1-score'] for cls in class_names]\n","\n","#para plotagem\n","x = range(len(class_names))\n","width = 0.2 #largura barras\n","\n","plt.figure(figsize=(12, 6))\n","plt.bar(x, precisoes, width, label='Precisão', color='blue')\n","plt.bar([i + width for i in x], recalls, width, label='Recall', color='green')\n","plt.bar([i + 2 * width for i in x], f1_scores, width, label='F1-Score', color='orange')\n","\n","#dos eixos\n","plt.xlabel('Classes')\n","plt.ylabel('Métricas')\n","plt.title('Métricas por Classe')\n","plt.xticks([i + width for i in x], class_names, rotation=45)\n","plt.legend()\n","plt.tight_layout()\n","plt.show()\n","\n","#CURVA ROC\n","true_binarized = label_binarize(true_test_list, classes=list(range(num_classes)))\n","\n","#variaveis para curvas e areas\n","fpr = dict()\n","tpr = dict()\n","roc_auc = dict()\n","\n","#calcular curva roc e auc para cada classe\n","for i in range(num_classes):\n","    fpr[i], tpr[i], _ = roc_curve(true_binarized[:, i], [p[i] for p in prob_test_list])\n","    roc_auc[i] = auc(fpr[i], tpr[i])\n","\n","#calcular marcro-average roc e auc\n","fpr[\"macro\"], tpr[\"macro\"], _=roc_curve(\n","    true_binarized.ravel(), [p for probs in prob_test_list for p in probs]\n",")\n","\n","roc_auc[\"macro\"] = auc(fpr[\"macro\"], tpr[\"macro\"])\n","\n","#plotar curvas roc para cada classe\n","plt.figure(figsize=(10, 8))\n","colors = plt.cm.get_cmap(\"tab10\", num_classes)\n","\n","\"\"\"\n","for i in range(num_classes):\n","    plt.plot(\n","        fpr[i],\n","        tpr[i],\n","        color=colors(i),\n","        lw=2,\n","        label=f\"Classe {class_names[i]} (AUC = {roc_auc[i]:0.2f})\",\n","    )\n","\"\"\"\n","\n","# Adicionar curva macro-average\n","plt.plot(\n","    fpr[\"macro\"],\n","    tpr[\"macro\"],\n","    color=\"darkorange\",\n","    linestyle=\"--\",\n","    lw=3,\n","    label=f\"Macro-average (AUC = {roc_auc['macro']:0.2f})\",\n",")\n","\n","# Configurar o gráfico\n","plt.plot([0, 1], [0, 1], color=\"navy\", linestyle=\"--\", lw=2)\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel(\"Taxa de Falsos Positivos (FPR)\")\n","plt.ylabel(\"Taxa de Verdadeiros Positivos (TPR)\")\n","plt.title(\"Curvas ROC para cada classe\")\n","plt.legend(loc=\"lower right\")\n","plt.grid()\n","plt.show()\n"]},{"cell_type":"markdown","source":["#Créditos"],"metadata":{"id":"sYe75ThkWY1A"},"id":"sYe75ThkWY1A"},{"cell_type":"code","source":["https://github.com/joaofmari/awesome-computer-vision-deep-learning"],"metadata":{"id":"iI2TjESeWbA3"},"id":"iI2TjESeWbA3","execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.4"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":5}